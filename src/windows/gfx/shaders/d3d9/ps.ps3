// Copyright (c) Christopher D. Dickson <cdd@matoya.group>
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this file,
// You can obtain one at https://spdx.org/licenses/MIT.html.

struct VS_OUTPUT {
	float4 position : SV_POSITION;
	float2 texcoord : TEXCOORD;
};

sampler tex0 : register(s0);
sampler tex1 : register(s1);
sampler tex2 : register(s2);

uniform float4 cb0 : register(c0);
uniform float4 cb1 : register(c1);

inline float4 yuv_to_rgba(float y, float u, float v)
{
	// Using "RGB to YCbCr color conversion for HDTV" (ITU-R BT.709)

	y = (y - 0.0625) * 1.164;
	u = u - 0.5;
	v = v - 0.5;

	float r = y + 1.793 * v;
	float g = y - 0.213 * u - 0.533 * v;
	float b = y + 2.112 * u;

	return float4(r, g, b, 1.0);
}

inline void gaussian(float type, float w, float h, inout float2 uv)
{
	float2 res = float2(w, h);
	float2 p = uv * res;
	float2 c = floor(p) + 0.5;
	float2 dist = p - c;

	// Sharp
	if (type == 3.0) {
		dist = 16.0 * dist * dist * dist * dist * dist;

	// Soft
	} else {
		dist = 4.0 * dist * dist * dist;
	}

	p = c + dist;

	uv = p / res;
}

inline void scanline(float effect, float y, float h, inout float4 rgba)
{
	float n = (effect == 1.0) ? 1.0 : 2.0;

	if (fmod(floor(y * h), n * 2.0) < n)
		rgba *= 0.7;
}

float4 main(VS_OUTPUT input) : SV_TARGET
{
	float width = cb0[0];
	float height = cb0[1];
	float vp_height = cb0[2];

	float filter = cb1[0];
	float effect = cb1[1];
	float format = cb1[2];
	float rotation = cb1[3];

	float4 rgba = 0.0;
	float2 uv = input.texcoord;

	// Rotation
	if (rotation == 1.0 || rotation == 3.0) {
		float tmp = uv[0];
		uv[0] = uv[1];
		uv[1] = tmp;
	}

	// Flipped vertically
	if (rotation == 1.0 || rotation == 2.0)
		uv[1] = 1.0 - uv[1];

	// Flipped horizontally
	if (rotation == 2.0 || rotation == 3.0)
		uv[0] = 1.0 - uv[0];

	// Gaussian
	if (filter == 3.0 || filter == 4.0)
		gaussian(filter, width, height, uv);

	// NV12, NV16
	if (format == 2.0 || format == 5.0) {
		float y = tex2D(tex0, uv).r;
		float u = tex2D(tex1, uv).r;
		float v = tex2D(tex1, uv).a;

		rgba = yuv_to_rgba(y, u, v);

	// I420, I444
	} else if (format == 3.0 || format == 4.0) {
		float y = tex2D(tex0, uv).r;
		float u = tex2D(tex1, uv).r;
		float v = tex2D(tex2, uv).r;

		rgba = yuv_to_rgba(y, u, v);

	// AYUV
	} else if (format == 8.0) {
		float y = tex2D(tex0, uv).r;
		float u = tex2D(tex0, uv).g;
		float v = tex2D(tex0, uv).b;

		rgba = yuv_to_rgba(y, u, v);

	// BGRA
	} else {
		rgba = tex2D(tex0, uv);
	}

	// Scanlines
	if (effect == 1.0 || effect == 2.0)
		scanline(effect, input.texcoord.y, vp_height, rgba);

	return rgba;
}
