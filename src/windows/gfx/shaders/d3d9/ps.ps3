// Copyright (c) Christopher D. Dickson <cdd@matoya.group>
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this file,
// You can obtain one at https://spdx.org/licenses/MIT.html.

struct VS_OUTPUT {
	float4 position : SV_POSITION;
	float2 texcoord : TEXCOORD;
};

sampler tex0 : register(s0);
sampler tex1 : register(s1);
sampler tex2 : register(s2);

uniform float4 cb0 : register(c0); // width, height, vp_height
uniform float4 cb1 : register(c1); // effects, levels
uniform float4 cb2 : register(c2); // planes, rotation, conversion

inline float4 yuv_to_rgba(int4 conversion, float y, float u, float v)
{
	// 10-bit -> 16-bit
	if (conversion[2]) {
		y *= 64.0;
		u *= 64.0;
		v *= 64.0;
	}

	// Full range
	if (conversion[0]) {
		u -= (128.0 / 255.0);
		v -= (128.0 / 255.0);

	// Limited
	} else {
		y = (y - 16.0 / 255.0) * (255.0 / 219.0);
		u = (u - 128.0 / 255.0) * (255.0 / 224.0);
		v = (v - 128.0 / 255.0) * (255.0 / 224.0);
	}

	float kr = 0.2126;
	float kb = 0.0722;

	float r = y + (2.0 - 2.0 * kr) * v;
	float b = y + (2.0 - 2.0 * kb) * u;
	float g = (y - kr * r - kb * b) / (1.0 - kr - kb);

	return float4(r, g, b, 1.0);
}

inline float4 sample_rgba(int planes, int4 conversion, float2 uv)
{
	float4 pixel0 = tex2D(tex0, uv);

	if (planes == 2) {
		float4 pixel1 = tex2D(tex1, uv);
		float y = pixel0.r;

		// A8L8
		float u = pixel1.r;
		float v = pixel1.a;

		// G16R16
		if (conversion[1]) {
			u = pixel1.r;
			v = pixel1.g;
		}

		return yuv_to_rgba(conversion, y, u, v);

	} else if (planes == 3) {
		float y = pixel0.r;
		float u = tex2D(tex1, uv).r;
		float v = tex2D(tex2, uv).r;

		return yuv_to_rgba(conversion, y, u, v);

	} else if (conversion[3]) {
		// AYUV
		float y = pixel0.r;
		float u = pixel0.g;
		float v = pixel0.b;

		// Y410
		if (conversion[1]) {
			y = pixel0.g;
			u = pixel0.b;
			v = pixel0.r;
		}

		return yuv_to_rgba(conversion, y, u, v);

	} else {
		return pixel0;
	}
}

inline void sharpen(float w, float h, float level, inout float2 uv)
{
	float2 res = float2(w, h);
	float2 p = uv * res;
	float2 c = floor(p) + 0.5;
	float2 dist = p - c;

	if (level >= 0.5) {
		dist = 16.0 * dist * dist * dist * dist * dist;

	} else {
		dist = 4.0 * dist * dist * dist;
	}

	uv = (c + dist) / res;
}

inline void scanline(float y, float h, float level, inout float4 rgba)
{
	float n = floor(h / 240.0);

	if (fmod(floor(y * h), n) < n / 2.0)
		rgba *= level;
}

inline float2 rotate(int rotation, float2 texcoord)
{
	float2 uv = texcoord;

	// Rotation
	if (rotation == 1 || rotation == 3) {
		float tmp = uv[0];
		uv[0] = uv[1];
		uv[1] = tmp;
	}

	// Flipped vertically
	if (rotation == 1 || rotation == 2)
		uv[1] = 1.0 - uv[1];

	// Flipped horizontally
	if (rotation == 2 || rotation == 3)
		uv[0] = 1.0 - uv[0];

	return uv;
}

inline int get_bit(inout int mask, int bit)
{
	if (mask >= bit) {
		mask -= bit;
		return 1;
	}

	return 0;
}

float4 main(VS_OUTPUT input) : SV_TARGET
{
	// Uniforms
	float width = cb0[0];
	float height = cb0[1];
	float vp_height = cb0[2];

	int2 effects = int2(cb1[0], cb1[1]);
	float2 levels = float2(cb1[2], cb1[3]);

	int planes = cb2[0];
	int rotation = cb2[1];
	int cbits = cb2[2];

	int4 conversion;
	conversion[3] = get_bit(cbits, 8);
	conversion[2] = get_bit(cbits, 4);
	conversion[1] = get_bit(cbits, 2);
	conversion[0] = get_bit(cbits, 1);

	// Rotate
	float2 uv = rotate(rotation, input.texcoord);

	// Sharpen
	for (int x = 0; x < 2; x++)
		if (effects[x] == 2)
			sharpen(width, height, levels[x], uv);

	// Sample
	float4 rgba = sample_rgba(planes, conversion, uv);

	// Effects
	for (int y = 0; y < 2; y++)
		if (effects[y] == 1)
			scanline(input.texcoord.y, vp_height, levels[y], rgba);

	return rgba;
}
